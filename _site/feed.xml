<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://sliencejoker.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://sliencejoker.github.io/" rel="alternate" type="text/html" /><updated>2021-03-21T14:14:15+08:00</updated><id>http://sliencejoker.github.io/feed.xml</id><title type="html">Lucifer の Blog</title><subtitle>Themed by ejjoo</subtitle><entry><title type="html">Github加速</title><link href="http://sliencejoker.github.io/tips/2021/03/21/Github%E5%8A%A0%E9%80%9F.html" rel="alternate" type="text/html" title="Github加速" /><published>2021-03-21T12:51:51+08:00</published><updated>2021-03-21T12:51:51+08:00</updated><id>http://sliencejoker.github.io/tips/2021/03/21/Github%E5%8A%A0%E9%80%9F</id><content type="html" xml:base="http://sliencejoker.github.io/tips/2021/03/21/Github%E5%8A%A0%E9%80%9F.html">&lt;h3 id=&quot;撰写缘由&quot;&gt;撰写缘由&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;今天在迁移gitee项目至github的过程中，多次push报错Error443，故整合一下github加速访问的方法。结合网络上github加速的各种奇技淫巧，采用更改hosts文件的方法。&lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;IP查询网站&lt;a href=&quot;https://www.ipaddress.com/&quot;&gt;IPAddress.com&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;要加速的内容
      &lt;ul&gt;
        &lt;li&gt;github.com&lt;/li&gt;
        &lt;li&gt;api.github.com&lt;/li&gt;
        &lt;li&gt;github.global.ssl.fastly.net&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;要操作的文件
hosts文件，windows操作系统上该文件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\WINDOWS\system32\drivers\etc&lt;/code&gt;目录下，macOS操作系统在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/&lt;/code&gt;目录下，由于笔者采用的是macOS操作系统，故以macOS为例进行实操。
      &lt;h3 id=&quot;操作&quot;&gt;操作&lt;/h3&gt;
      &lt;p&gt;在IPAddress.com网站中查询以上三个要映射的网站IP，笔者查出来的结果如下：&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;140.82.114.4 github.com&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;199.232.69.194 github.global.ssl.fastly.net&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;140.82.112.6 api.github.com&lt;/code&gt;&lt;br /&gt;
复制如上三行命令，在终端执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo nano /etc/hosts&lt;/code&gt; ，输入自己的密码，追加在hosts文件内容底部。&lt;br /&gt;
最后执行刷新dns命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dscacheutil -flushcache&lt;/code&gt;，windows命令为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipconfig /flushdns&lt;/code&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="tips" /><summary type="html">撰写缘由 今天在迁移gitee项目至github的过程中，多次push报错Error443，故整合一下github加速访问的方法。结合网络上github加速的各种奇技淫巧，采用更改hosts文件的方法。 准备工作 IP查询网站IPAddress.com 要加速的内容 github.com api.github.com github.global.ssl.fastly.net 要操作的文件 hosts文件，windows操作系统上该文件在 C:\WINDOWS\system32\drivers\etc目录下，macOS操作系统在/etc/目录下，由于笔者采用的是macOS操作系统，故以macOS为例进行实操。 操作 在IPAddress.com网站中查询以上三个要映射的网站IP，笔者查出来的结果如下： 140.82.114.4 github.com 199.232.69.194 github.global.ssl.fastly.net 140.82.112.6 api.github.com 复制如上三行命令，在终端执行 sudo nano /etc/hosts ，输入自己的密码，追加在hosts文件内容底部。 最后执行刷新dns命令sudo dscacheutil -flushcache，windows命令为ipconfig /flushdns</summary></entry><entry><title type="html">贾志楷的个人简历</title><link href="http://sliencejoker.github.io/resume/2021/03/20/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.html" rel="alternate" type="text/html" title="贾志楷的个人简历" /><published>2021-03-20T22:43:50+08:00</published><updated>2021-03-20T22:43:50+08:00</updated><id>http://sliencejoker.github.io/resume/2021/03/20/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86</id><content type="html" xml:base="http://sliencejoker.github.io/resume/2021/03/20/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.html">&lt;h4 id=&quot;个人信息&quot;&gt;个人信息&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;姓名：贾志楷 | 求职岗位：Java开发 &lt;br /&gt;
预计到岗时间：1个月之内 ｜意向城市：上海 &lt;br /&gt;
📧：2036736521@qq.com | 📱：+86 18295780761 ｜ 🏠：河北省石家庄市辛集市辛集镇车站街凌宇大楼&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;h4 id=&quot;教育经历2016-09-至-2020-07-武汉纺织大学--管理学院-市场营销-&quot;&gt;教育经历：&lt;em&gt;2016-09 至 2020-07 &lt;a href=&quot;https://www.wtu.edu.cn/&quot;&gt;武汉纺织大学&lt;/a&gt;  &lt;a href=&quot;http://em.wtu.edu.cn/&quot;&gt;管理学院&lt;/a&gt; &lt;a href=&quot;http://em.wtu.edu.cn/info/1005/1018.htm&quot;&gt;市场营销&lt;/a&gt;&lt;/em&gt; &lt;br /&gt;&lt;/h4&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;h4 id=&quot;相关技能java--html--mysql--office办公软件--xmind--linux--axure-rp--idea--eclipse--vscode&quot;&gt;相关技能：&lt;em&gt;Java &amp;amp; HTML &amp;amp; MySQL | Office办公软件 | XMind &amp;amp; Linux | Axure RP | IDEA &amp;amp; Eclipse &amp;amp; VSCode&lt;/em&gt;&lt;/h4&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;h4 id=&quot;项目经历&quot;&gt;项目经历&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;2020-07 至今 这是一段毫无意义的文字，但是为了不影响大家阅读
2014-03 至 2015-06 这是一段毫无意义的文字，但是为了不影响大家阅读&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;社会经历&quot;&gt;社会经历&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;2020-02 至 2020-04 在北京求职2个月，先后经历过联想、链家、热风、京东商超、前程无忧、尚德等公司的面试，加深了自我认知，明确自己的优缺点和个人特色。&lt;/li&gt;
    &lt;li&gt;2018-06 至 2018-09 在武汉纸路科技有限公司担任渠道经理，为该公司扩展了销售渠道，同时学习了HTML前端方面的知识，打开兴趣大门。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;校园经历&quot;&gt;校园经历&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;2019-09 至 2019-11 担任广州诺米品牌管理有限公司校园大使，负责该公司在我校的秋招工作，包括但不限于公司品牌宣传、校园场地申请、求职社群维护等工作，为该公司输送了亟需的营销人才如管培生、买手助理以及部分职能岗人才如生产设计等。&lt;/li&gt;
    &lt;li&gt;2017-09 至 2018-09 担任武汉纺织大学计算机协会副会长和班级副班长。以计算机协会副会长的身份参与成都源码科技公司组织的湘、鄂、川、贵、赣、渝等省市高校的计算机协会线下大型团建活动，提升了在IT方面的见识。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="resume" /><summary type="html">个人信息 姓名：贾志楷 | 求职岗位：Java开发 预计到岗时间：1个月之内 ｜意向城市：上海 📧：2036736521@qq.com | 📱：+86 18295780761 ｜ 🏠：河北省石家庄市辛集市辛集镇车站街凌宇大楼</summary></entry><entry><title type="html">如何部署一个项目</title><link href="http://sliencejoker.github.io/linux/2021/03/20/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAweb%E9%A1%B9%E7%9B%AE.html" rel="alternate" type="text/html" title="如何部署一个项目" /><published>2021-03-20T08:00:00+08:00</published><updated>2021-03-20T08:00:00+08:00</updated><id>http://sliencejoker.github.io/linux/2021/03/20/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAweb%E9%A1%B9%E7%9B%AE</id><content type="html" xml:base="http://sliencejoker.github.io/linux/2021/03/20/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAweb%E9%A1%B9%E7%9B%AE.html">&lt;h1 id=&quot;撰写缘由&quot;&gt;撰写缘由&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;一个正规的web项目部署，tomcat服务和mysql服务分别部署在不同的服务器上，由于自己的黑苹果操作系统无法传输，借用别人的电脑实操了一下项目部署，以便加深自己的印象。&lt;/p&gt;
  &lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;
  &lt;p&gt;1.虚拟机centOS两台，分别装tomcat和mysql。&lt;br /&gt;
2.常用的查询命令，例如查ip，开端口，解压war包。&lt;br /&gt;
3.将自己的web项目打包成war包 &lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;假设条件&quot;&gt;假设条件&lt;/h3&gt;
  &lt;p&gt;centOS虚拟机正常。&lt;br /&gt;
tomcat端口已经改为80&lt;br /&gt;
mysql端口默认3306&lt;/p&gt;
  &lt;h3 id=&quot;开始部署&quot;&gt;开始部署&lt;/h3&gt;
  &lt;p&gt;step1.查询装有tomcat的虚拟机的ip，ip查询命令为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;，记住该虚拟机的ip地址，格式为192.168.XXX.XXX。（这样的ip地址实际上为ipv4地址）。&lt;br /&gt;
step2. 开放tomcat服务与主机的连接。首先更改tomcat的端口，该配置文件是tomcat tar.gz包解压缩之后的文件夹里的conf文件夹下的server.xml。
其次放开80端口。执行命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall-cmd --zone=public --add-port=80/tcp --permanent &lt;/code&gt;，然后重启防火墙服务，执行命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall-cmd --reload&lt;/code&gt; ，最后检查端口是否放开，执行命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall-cmd --query-port=80/tcp&lt;/code&gt;，确认端口已放行。最后启动tomcat服务，在主机上打开浏览器直接输入tomcat服务机的ip地址，验证是否可以和主机做连接。&lt;br /&gt;
step3:进入装有mysql的虚拟机，执行开放端口操作。
命令为：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.XXX.XXX&quot; port protocol=&quot;tcp&quot; port=&quot;3306&quot; accept&quot;  &lt;/code&gt;后续重启防火墙服务和检查端口是否正常放行。&lt;br /&gt;
step4:用自己的方式将war包传输到装有tomcat的linux服务机上，假设tomcat解压缩的路径为/home/demo/tomcat，假设war包被你传输在了/home/demo/XXX.war，在终端中依次执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd /home/demo&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip XXX.war -d /home/demo/tomcat/webapps/XXX&lt;/code&gt; ，这样就成功解压缩war包。&lt;br /&gt;
step5:导入你项目所需要的数据库，同时微调项目部分配置，在浏览器上输入步骤一获取到的ip，对项目进行测试。&lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;知识点&quot;&gt;知识点&lt;/h3&gt;
  &lt;p&gt;取巧方法，直接干掉linux的防火墙服务，不可取。&lt;br /&gt;
两种放开端口方法的区别：第一种命令如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firewall-cmd --zone=public --add-port=80/tcp --permanent&lt;/code&gt; ，这种开放端口命令的弊端是所有的ip都可以连接这个端口。第二种命令如步骤三的长命令，该命令的优势是指定ip访问端口，可以尽量避免服务器被攻击。&lt;/p&gt;

&lt;/blockquote&gt;</content><author><name></name></author><category term="linux" /><summary type="html">撰写缘由 一个正规的web项目部署，tomcat服务和mysql服务分别部署在不同的服务器上，由于自己的黑苹果操作系统无法传输，借用别人的电脑实操了一下项目部署，以便加深自己的印象。 准备工作 1.虚拟机centOS两台，分别装tomcat和mysql。 2.常用的查询命令，例如查ip，开端口，解压war包。 3.将自己的web项目打包成war包 假设条件 centOS虚拟机正常。 tomcat端口已经改为80 mysql端口默认3306 开始部署 step1.查询装有tomcat的虚拟机的ip，ip查询命令为ifconfig，记住该虚拟机的ip地址，格式为192.168.XXX.XXX。（这样的ip地址实际上为ipv4地址）。 step2. 开放tomcat服务与主机的连接。首先更改tomcat的端口，该配置文件是tomcat tar.gz包解压缩之后的文件夹里的conf文件夹下的server.xml。 其次放开80端口。执行命令firewall-cmd --zone=public --add-port=80/tcp --permanent ，然后重启防火墙服务，执行命令firewall-cmd --reload ，最后检查端口是否放开，执行命令firewall-cmd --query-port=80/tcp，确认端口已放行。最后启动tomcat服务，在主机上打开浏览器直接输入tomcat服务机的ip地址，验证是否可以和主机做连接。 step3:进入装有mysql的虚拟机，执行开放端口操作。 命令为：firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.XXX.XXX&quot; port protocol=&quot;tcp&quot; port=&quot;3306&quot; accept&quot; 后续重启防火墙服务和检查端口是否正常放行。 step4:用自己的方式将war包传输到装有tomcat的linux服务机上，假设tomcat解压缩的路径为/home/demo/tomcat，假设war包被你传输在了/home/demo/XXX.war，在终端中依次执行cd /home/demo，unzip XXX.war -d /home/demo/tomcat/webapps/XXX ，这样就成功解压缩war包。 step5:导入你项目所需要的数据库，同时微调项目部分配置，在浏览器上输入步骤一获取到的ip，对项目进行测试。 知识点 取巧方法，直接干掉linux的防火墙服务，不可取。 两种放开端口方法的区别：第一种命令如firewall-cmd --zone=public --add-port=80/tcp --permanent ，这种开放端口命令的弊端是所有的ip都可以连接这个端口。第二种命令如步骤三的长命令，该命令的优势是指定ip访问端口，可以尽量避免服务器被攻击。</summary></entry><entry><title type="html">Redis安装及服务化启动</title><link href="http://sliencejoker.github.io/linux/2021/03/17/Redis%E5%AE%89%E8%A3%85%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%90%AF%E5%8A%A8.html" rel="alternate" type="text/html" title="Redis安装及服务化启动" /><published>2021-03-17T18:00:00+08:00</published><updated>2021-03-17T18:00:00+08:00</updated><id>http://sliencejoker.github.io/linux/2021/03/17/Redis%E5%AE%89%E8%A3%85%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%90%AF%E5%8A%A8</id><content type="html" xml:base="http://sliencejoker.github.io/linux/2021/03/17/Redis%E5%AE%89%E8%A3%85%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%8C%96%E5%90%AF%E5%8A%A8.html">&lt;h1 id=&quot;撰写缘由&quot;&gt;撰写缘由&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;这几天在安装redis的时候碰上不少坑，基于问题解决一次到位的原则结合网上各路大神的帖子终于找出Redis安装和服务化启动的最优解，特此记录一下，以备不时之需。&lt;br /&gt;&lt;/p&gt;
  &lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;
  &lt;p&gt;本教程基于CentOS 7及以上版本安装，其他Linux发行版可以参考，未必当唯一标准进行指导。&lt;br /&gt;
话不多说，安装过程开始：&lt;/p&gt;
  &lt;h3 id=&quot;step1-安装前准备工作&quot;&gt;Step1 安装前准备工作&lt;/h3&gt;
  &lt;p&gt;由于笔者从一干二净的centOS Service无Gui版本开始进行安装，且以root身份登陆，故先安装编译必备的依赖make和gcc。&lt;br /&gt;
yum install make&lt;br /&gt;
yum install gcc&lt;br /&gt;
通过以上命令成功安装编译redis所需依赖，非root用户安装过程中可能存在yum提示权限不足，只需要在命令之前追加sudo即可。&lt;/p&gt;
  &lt;h3 id=&quot;step2-redis安装包的下载解压及编译&quot;&gt;Step2 Redis安装包的下载解压及编译&lt;/h3&gt;
  &lt;p&gt;参考Redis官网指导&lt;a&gt;https://redis.io/download&lt;/a&gt; ，在linux终端中cd到你能记得住的一个文件夹下，最好是home文件夹下，然后执行相关命令，避免麻烦，贴上所需命令：&lt;br /&gt;
cd /home &lt;br /&gt;
wget https://download.redis.io/releases/redis-6.2.1.tar.gz &lt;br /&gt;
tar xzf redis-6.2.1.tar.gz &lt;br /&gt;
cd redis-6.2.1 &lt;br /&gt;
make &lt;br /&gt;
接下来就是终端执行编译过程，最终会在redis-6.2.1文件夹下生成src文件夹，在该文件夹中存在redis服务启动必备的一些文件。&lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;step3-安装到指定位置&quot;&gt;Step3 安装到指定位置&lt;/h3&gt;
  &lt;p&gt;参考博文&lt;a&gt;https://blog.csdn.net/simonforfuture/article/details/92801822&lt;/a&gt;贴上如下命令&lt;br /&gt;
安装到/usr/local/redis目录下 &lt;br /&gt;
make PREFIX=/usr/local/redis install &lt;br /&gt;
拷贝配置文件
cp redis.conf /usr/local/redis/ &lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;note-1&quot;&gt;Note&lt;/h3&gt;
  &lt;p&gt;如有特殊需求，可以对redis.conf 文件进行适当修改，例如daemonize、databases、port等。&lt;br /&gt;
如需启用客户端连接redis时的密码，取消requirepass foobared该行的注释，并将foobared改为自己所需要的密码。&lt;br /&gt;
如需启用日志文件，找到logfile “” 行并将其更改为logfile “redis.log” ，这样redis会在运行时会生成日志文件。&lt;br /&gt;
如需更改默认6379端口，只需要找到port 6379行并将6379改为你所需要的端口。&lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;step4-服务化启动&quot;&gt;Step4 服务化启动&lt;/h3&gt;
  &lt;p&gt;参考&lt;a href=&quot;https://www.php.cn/redis/458172.html&quot;&gt;redis如何设置开机自启动&lt;/a&gt;该文章，并提出如下补充事项&lt;br /&gt;
note_1:redis_init_script文件在redis tar.gz包解压缩后的文件夹中。&lt;br /&gt;
note_2:由于上述操作已将redis安装至/usr/local/redis/路径之下，故脚本文件的编辑中应做如下修改：&lt;br /&gt;
在#!/bin/sh下添加如下两行&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# chkconfig: 2345 10 90&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;# description: Start and Stop redis&lt;/code&gt;&lt;br /&gt;
对照脚本文件中的内容，确保是下所示：&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REDISPORT=6379&lt;/code&gt; 此处请和你redis.conf文件中的端口号相匹配。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXEC=/usr/local/redis/bin/redis-server&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLIEXEC=/usr/local/redis/bin/redis-cli&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONF=&quot;/usr/local/redis/redis.conf&quot;&lt;/code&gt;&lt;br /&gt;
上述三行为你执行安装到指定目录后的redis相关文件路径，redis-server用于启动redis服务，redis-cli文件用于建立redis客户端连接，redis.conf是redis服务启动的配置文件。&lt;br /&gt;
将redis添加至开机自启动&lt;br /&gt;
chkconfig –add redis&lt;br /&gt;
chkconfig redis on&lt;br /&gt;
为确保redis启动，可继续执行如下命令&lt;br /&gt;
systemctl start redis &lt;br /&gt;&lt;/p&gt;
  &lt;h3 id=&quot;step5-重启并进行检查&quot;&gt;Step5 重启并进行检查&lt;/h3&gt;
  &lt;p&gt;最后reboot你的Linux操作系统，启动后输入systemctl status redis命令查看redis是否开机自启动，当显示Active：active(running)时说明redis已经开机自启动。&lt;/p&gt;
  &lt;h1 id=&quot;note-2&quot;&gt;Note&lt;/h1&gt;
  &lt;p&gt;本次安装不足之处，redis-cli连接时需要进入到/usr/local/redis目录下，执行相关命令。若端口密码进行了修改，则进入redis安装目录下后，执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/redis-cli -p 你的端口号 -a 你的密码&lt;/code&gt;进行连接，连接之后执行ping命令，若结果为PONG，说明正确连接redis服务。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="linux" /><summary type="html">撰写缘由 这几天在安装redis的时候碰上不少坑，基于问题解决一次到位的原则结合网上各路大神的帖子终于找出Redis安装和服务化启动的最优解，特此记录一下，以备不时之需。 Note 本教程基于CentOS 7及以上版本安装，其他Linux发行版可以参考，未必当唯一标准进行指导。 话不多说，安装过程开始： Step1 安装前准备工作 由于笔者从一干二净的centOS Service无Gui版本开始进行安装，且以root身份登陆，故先安装编译必备的依赖make和gcc。 yum install make yum install gcc 通过以上命令成功安装编译redis所需依赖，非root用户安装过程中可能存在yum提示权限不足，只需要在命令之前追加sudo即可。 Step2 Redis安装包的下载解压及编译 参考Redis官网指导https://redis.io/download ，在linux终端中cd到你能记得住的一个文件夹下，最好是home文件夹下，然后执行相关命令，避免麻烦，贴上所需命令： cd /home wget https://download.redis.io/releases/redis-6.2.1.tar.gz tar xzf redis-6.2.1.tar.gz cd redis-6.2.1 make 接下来就是终端执行编译过程，最终会在redis-6.2.1文件夹下生成src文件夹，在该文件夹中存在redis服务启动必备的一些文件。 Step3 安装到指定位置 参考博文https://blog.csdn.net/simonforfuture/article/details/92801822贴上如下命令 安装到/usr/local/redis目录下 make PREFIX=/usr/local/redis install 拷贝配置文件 cp redis.conf /usr/local/redis/ Note 如有特殊需求，可以对redis.conf 文件进行适当修改，例如daemonize、databases、port等。 如需启用客户端连接redis时的密码，取消requirepass foobared该行的注释，并将foobared改为自己所需要的密码。 如需启用日志文件，找到logfile “” 行并将其更改为logfile “redis.log” ，这样redis会在运行时会生成日志文件。 如需更改默认6379端口，只需要找到port 6379行并将6379改为你所需要的端口。 Step4 服务化启动 参考redis如何设置开机自启动该文章，并提出如下补充事项 note_1:redis_init_script文件在redis tar.gz包解压缩后的文件夹中。 note_2:由于上述操作已将redis安装至/usr/local/redis/路径之下，故脚本文件的编辑中应做如下修改： 在#!/bin/sh下添加如下两行 # chkconfig: 2345 10 90 # description: Start and Stop redis 对照脚本文件中的内容，确保是下所示： REDISPORT=6379 此处请和你redis.conf文件中的端口号相匹配。 EXEC=/usr/local/redis/bin/redis-server CLIEXEC=/usr/local/redis/bin/redis-cli CONF=&quot;/usr/local/redis/redis.conf&quot; 上述三行为你执行安装到指定目录后的redis相关文件路径，redis-server用于启动redis服务，redis-cli文件用于建立redis客户端连接，redis.conf是redis服务启动的配置文件。 将redis添加至开机自启动 chkconfig –add redis chkconfig redis on 为确保redis启动，可继续执行如下命令 systemctl start redis Step5 重启并进行检查 最后reboot你的Linux操作系统，启动后输入systemctl status redis命令查看redis是否开机自启动，当显示Active：active(running)时说明redis已经开机自启动。 Note 本次安装不足之处，redis-cli连接时需要进入到/usr/local/redis目录下，执行相关命令。若端口密码进行了修改，则进入redis安装目录下后，执行./bin/redis-cli -p 你的端口号 -a 你的密码进行连接，连接之后执行ping命令，若结果为PONG，说明正确连接redis服务。</summary></entry><entry><title type="html">my-first-post</title><link href="http://sliencejoker.github.io/jekyll/2021/03/16/my-first-post.html" rel="alternate" type="text/html" title="my-first-post" /><published>2021-03-16T20:48:23+08:00</published><updated>2021-03-16T20:48:23+08:00</updated><id>http://sliencejoker.github.io/jekyll/2021/03/16/my-first-post</id><content type="html" xml:base="http://sliencejoker.github.io/jekyll/2021/03/16/my-first-post.html">&lt;h1 id=&quot;jekyll初次使用体验&quot;&gt;jekyll初次使用体验&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;跟着网上的教程乱七八糟的，终于搭好了自己的博客。
感谢少数派的教程，感谢jekyllThemes大佬们的贡献，
感谢jekyll官网的文档指点。
在本次搭建博客的过程中，遇到了几个比较坑的问题，
附上问题和解决办法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;问题及解决办法&quot;&gt;问题及解决办法&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Q1:jekyll command not find&lt;br /&gt;
A1:参考jekyll官网，给出的解决方案是：&lt;br /&gt;
在终端环境配置文件中(example:zshrc)添加环境变量&lt;br /&gt;
export GEM_HOME=$HOME/gems&lt;br /&gt;
export PATH=$HOME/gems/bin:$PATH&lt;br /&gt;
添加完成后重新执行gem install jekyll命令即可&lt;br /&gt;
Q2:Error cannot load such file –webrick(LoadError)&lt;br /&gt;
A2:在博客项目文件夹下执行命令bundle add webrick&lt;br /&gt;
Q3：配置问题&lt;br /&gt;
A3:这是个细心活，缺少相关依赖，终端中gem安装缺少的包，在博客模板项目配置文件中注意版本号相匹配&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.尽量避免sudo gem XXX 的方式&lt;br /&gt;
2.参考清华大学开源镜像站更改ruby国内源，加快下载速度&lt;br /&gt;
&lt;a&gt;https://mirrors.tuna.tsinghua.edu.cn/help/rubygems/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="jekyll" /><summary type="html">jekyll初次使用体验 跟着网上的教程乱七八糟的，终于搭好了自己的博客。 感谢少数派的教程，感谢jekyllThemes大佬们的贡献， 感谢jekyll官网的文档指点。 在本次搭建博客的过程中，遇到了几个比较坑的问题， 附上问题和解决办法。</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://sliencejoker.github.io/jekyll/update/2020/01/02/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-01-02T18:31:29+08:00</published><updated>2020-01-02T18:31:29+08:00</updated><id>http://sliencejoker.github.io/jekyll/update/2020/01/02/welcome-to-jekyll</id><content type="html" xml:base="http://sliencejoker.github.io/jekyll/update/2020/01/02/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>